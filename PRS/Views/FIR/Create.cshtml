@using BootstrapSupport
@model PRS.Models.AdmissionFIR
@{
    ViewBag.Title =  ViewBag.Mode + " FIR INFORMATION ایف آئی آر";
}

@section head{
    @Styles.Render("~/content/typeahead")
    @Styles.Render("~/content/duallistbox")
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <table class="table2columns">
        <tr>
            <td>
                <fieldset class="form-horizontal">

                    <div class="title">@ViewBag.Title</div>

                    @Html.HiddenFor(model => model.FIR.FIRId)
                    @Html.Hidden("FIR.AdmissionId", Request["AdmissionId"])
                    @Html.HiddenFor(model => model.FIR.IsActive)

                    <div class="control-group">
                        @Html.LabelFor(model => model.FIR.FIRNumber, new { @class = "control-label" })
                        <div class="controls">
                            @Html.EditorFor(model => model.FIR.FIRNumber)
                            @Html.ValidationMessageFor(model => model.FIR.FIRNumber, "*", new { @class = "help-inline" })
                        </div>
                    </div>
                    <div class="control-group">
                        @Html.LabelFor(model => model.FIR.FIRDate, new { @class = "control-label" })
                        <div class="controls">
                            <input type="text" name="FIR.FIRDate" class="datepicker" data-date-format="dd-M-yyyy" value="@Html.DisplayFor(model => model.FIR.FIRDate)">
                            @Html.ValidationMessageFor(model => model.FIR.FIRDate, "*", new { @class = "help-inline" })
                        </div>
                    </div>
                    <div class="control-group">
                        @Html.Label("Province صوبہ", new { @class = "control-label" })
                        <div class="controls">
                            @Html.DropDownList("ProvinceId", "-- Select Province --")
                            @Html.Label("*", new { @class = "help-inline" })
                        </div>
                    </div>
                    <div class="control-group">
                        @Html.Label("District ضلع", new { @class = "control-label" })
                        <div class="controls">
                            @Html.DropDownList("DistrictId", "-- Select District --")
                            @Html.Label("*", new { @class = "help-inline" })
                        </div>
                    </div>
                    <div class="control-group">
                        @Html.LabelFor(model => model.FIR.PoliceStation, new { @class = "control-label" })
                        <div class="controls">
                            <input id="SelectedPS" type="hidden" />
                            <input id="PSName" name="PSName" type="text" autocomplete="off" value="@ViewBag.PSName" onkeypress="onKeyDownPSName(this);" />
                            <input id="PoliceStationId" type="hidden" name="FIR.PoliceStationId" value="@Model.FIR.PoliceStationId" />
                            @Html.Label("*", new { @class = "help-inline" })
                        </div>
                    </div>

                    <div class="control-group">
                        <div style="width:490px">
                            <select id="sectionList" name="sectionList" multiple></select>
                        </div>
                    </div>

                    <div class="title">COURT PRODUCTION کورٹ پیشی</div>

                    @Html.HiddenFor(model => model.CourtHearing.CourtHearingId)
                    @Html.Hidden("CourtHearing.AdmissionId", Request["AdmissionId"])
                    @Html.Hidden("CourtHearing.PrisonerId", Request["PrisonerId"])
                    @Html.HiddenFor(model => model.CourtHearing.IsActive)

                    <div class="control-group">
                        @Html.LabelFor(model => model.CourtHearing.Court, new { @class = "control-label" })
                        <div class="controls">
                            @Html.DropDownList("CourtHearing.CourtId", ViewBag.CourtId as SelectList, "-- Select Court --", null)
                            @Html.ValidationMessageFor(model => model.CourtHearing.CourtId, "*", new { @class = "help-inline" })
                        </div>
                    </div>

                    <div class="control-group">
                        @Html.LabelFor(model => model.CourtHearing.JudgeType, new { @class = "control-label" })
                        <div class="controls">
                            @Html.DropDownList("CourtHearing.JudgeTypeId", ViewBag.CourtHearingJudgeTypeId as SelectList, "-- Select Judge Type --", null)
                            @Html.ValidationMessageFor(model => model.CourtHearing.JudgeTypeId, "*", new { @class = "help-inline" })
                        </div>
                    </div>

                    <div class="control-group">
                        @Html.LabelFor(model => model.CourtHearing.Judge, new { @class = "control-label" })
                        <div class="controls">
                            <input id="SelectedJudge" type="hidden" />
                            <input id="JudgeName" name="JudgeName" type="text" autocomplete="off" value="@ViewBag.JudgeName" onkeypress="onKeyDownJudgeName(this);" />
                            <input id="JudgeId" type="hidden" name="CourtHearing.JudgeId" value="@Model.CourtHearing.JudgeId" />
                            @Html.Label("*", new { @class = "help-inline" })
                        </div>
                    </div>
                    <div class="control-group">
                        @Html.LabelFor(model => model.CourtHearing.DateOfCourtOrder, new { @class = "control-label" })
                        <div class="controls">
                            <input type="text" name="CourtHearing.DateOfCourtOrder" class="datepicker" data-date-format="dd-M-yyyy" value="@Html.DisplayFor(model => model.CourtHearing.DateOfCourtOrder)">
                            @Html.ValidationMessageFor(model => model.CourtHearing.DateOfCourtOrder, "*", new { @class = "help-inline" })
                        </div>
                    </div>
                    <div class="control-group">
                        @Html.LabelFor(model => model.CourtHearing.DateOfHearing, new { @class = "control-label" })
                        <div class="controls">
                            <input type="text" name="CourtHearing.DateOfHearing" class="datepicker" data-date-format="dd-M-yyyy" value="@Html.DisplayFor(model => model.CourtHearing.DateOfHearing)">
                            @Html.ValidationMessageFor(model => model.CourtHearing.DateOfHearing, "*", new { @class = "help-inline" })
                        </div>
                    </div>
                    <div class="control-group">
                        @Html.LabelFor(model => model.CourtHearing.Remarks, new { @class = "control-label" })
                        <div class="controls">
                            @Html.EditorFor(model => model.CourtHearing.Remarks)
                            @Html.ValidationMessageFor(model => model.CourtHearing.Remarks, string.Empty, new { @class = "help-inline" })
                        </div>
                    </div>
                    <div class="title">COURT DECISION کیس کا فیصلہ</div>
                    <div class="control-group">
                        @Html.LabelFor(model => model.FIR.DecisionStatus, new { @class = "control-label" })
                        <div class="controls">
                            @Html.DropDownList("FIR.DecisionStatus", ViewBag.DecisionStatus as SelectList)
                        </div>
                    </div>
                    <div class="control-group">
                        @Html.LabelFor(model => model.FIR.DecisionDate, new { @class = "control-label" })
                        <div class="controls">
                            <input type="text" name="FIR.DecisionDate" class="datepicker" data-date-format="dd-M-yyyy" value="@Html.DisplayFor(model => model.FIR.DecisionDate)">
                            @Html.ValidationMessageFor(model => model.FIR.DecisionDate, "", new { @class = "help-inline" })
                        </div>
                    </div>
                    <div class="control-group">
                        @Html.LabelFor(model => model.FIR.JudgeType, new { @class = "control-label" })
                        <div class="controls">
                            @Html.DropDownList("FIR.JudgeTypeId", ViewBag.FIRJudgeTypeId as SelectList, "-- Select Judge Type --", null)
                            @Html.ValidationMessageFor(model => model.FIR.JudgeTypeId,"", new { @class = "help-inline" })
                        </div>
                    </div>
                    <div class="control-group">
                        @Html.LabelFor(model => model.FIR.DecisionAuthority, new { @class = "control-label" })
                        <div class="controls">
                            @Html.EditorFor(model => model.FIR.DecisionAuthority)
                            @Html.ValidationMessageFor(model => model.FIR.DecisionAuthority, string.Empty, new { @class = "help-inline" })
                        </div>
                    </div>
                    <div class="control-group">
                        <div class="controls">
                            <input type="submit" value="Save" class="btn btn-primary" /> |
                            @Html.ActionLink("Back to Admission", "Details", "Admission", new { PrisonerId = Request["PrisonerId"], AdmissionId = Request["AdmissionId"] }, null)
                        </div>
                    </div>
                </fieldset>
            </td>
            <td>
                <div class="title">EXISTING FIRs تمام ایف آئی آر
                    <div class="float-right">@Html.ActionLink("New FIR & Court Production", "Create", "FIR", new { id ="", PrisonerId = Model.CourtHearing.PrisonerId, AdmissionId = Model.FIR.AdmissionId }, new { @class = "btn btn-small btn-success" })</div>
                </div>
                <table class="table" id="table2excel">
                    <thead>
                        <tr>
                            <th>@Html.DisplayNameFor(model => model.FIRs.FirstOrDefault().FIRNumber)</th>
                            <th>@Html.DisplayNameFor(model => model.FIRs.FirstOrDefault().FIRDate)</th>
                            <th>@Html.DisplayNameFor(model => model.FIRs.FirstOrDefault().PoliceStation)</th>
                            <th>Under Sections</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.FIRs)
                        {
                            <tr>
                                <td>@Html.DisplayFor(modelItem => item.FIRNumber)</td>
                                <td>@Html.DisplayFor(modelItem => item.FIRDate)</td>
                                <td>@Html.DisplayFor(modelItem => item.PoliceStation.Name)</td>
                                <td>
                                    @{
                            var sections = "";
                                    }

                                    @foreach (var us in item.Sections)
                                    {
                                        sections += us.Name + ",";
                                    }

                                    @if (sections.Length > 0)
                                    {
                                        sections = sections.Remove(sections.Length - 1);
                                    }

                                    @Html.Label(sections)
                                </td>
                                <td>
                                    @{ var routeValues = new { id = item.FIRId, PrisonerId = Model.CourtHearing.PrisonerId, AdmissionId = Model.FIR.AdmissionId };}
                                    @Html.ActionLink("Edit", "Create", "FIR", routeValues, new { @class = "btn btn-small btn-info" })
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </td>
        </tr>
    </table>
}

@section Scripts {
    @Scripts.Render("~/js/duallistbox")
    @Scripts.Render("~/bundles/typeahead")

    <script>
        $.validator.setDefaults({
            highlight: function (element) {
                $(element).closest(".control-group").addClass("error");
            },
            unhighlight: function (element) {
                $(element).closest(".control-group").removeClass("error");
            }
        });

        $('.datepicker').datepicker({ autoclose: true });

        /////////////////////////////////////////////////////////////// COURT HEARING /////////////////////////////////////////////////////////

        $("#PSName").typeahead({
            name: 'PoliceStations',
            valueKey: 'Name',
            remote: '@Url.Content("~/PoliceStation/List/")%QUERY'
        });


        $("#JudgeName").typeahead({
            name: 'Judges',
            valueKey: 'Name',
            remote: '@Url.Content("~/Judge/List/")%QUERY'
        });

        /////////////////////////////////////////////////////////////// FIR /////////////////////////////////////////////////////////

        $("#PSName").on("typeahead:selected typeahead:autocompleted", function (e, selectedItem) {
            if (selectedItem) {
                $("#PoliceStationId").val(selectedItem.PoliceStationId);
                var name = $("#PSName").val().trim();
                $("#PSName").val(name);
                $("#SelectedPS").val(name);
            }
        });

        $("#JudgeName").on("typeahead:selected typeahead:autocompleted", function (e, selectedItem) {
            if (selectedItem) {
                $("#JudgeId").val(selectedItem.JudgeId);
                var name = $("#JudgeName").val().trim();
                $("#JudgeName").val(name);
                $("#SelectedJudge").val(name);
            }
        });

        function onKeyDownPSName(e) {
            if ($("#PSName").val() != $("#SelectedPS").val()) {
                $("#PoliceStationId").val("0");
            }
        }

        function onKeyDownJudgeName(e) {
            if ($("#JudgeName").val() != $("#SelectedJudge").val()) {
                $("#JudgeId").val("0");
            }
        }

        var list = $('#sectionList').bootstrapDualListbox({
            bootstrap2Compatible: true,
            moveAllLabel: 'MOVE ALL',
            removeAllLabel: 'REMOVE ALL',
            moveSelectedLabel: 'MOVE SELECTED',
            removeSelectedLabel: 'REMOVE SELECTED',
            filterPlaceHolder: 'FILTER',
            moveOnSelect: false,
            preserveSelectionOnMove: 'all',
            helperSelectNamePostfix: '_myhelper',
            selectedListLabel: '<strong>Committed Sections</strong>',
            nonSelectedListLabel: '<strong>Available Sections</strong>'
        });

        var getUrl = '@Url.Content("~/FIR/FIRSections")?firId=@Model.FIR.FIRId';

        $.getJSON(getUrl, function (data) {

            var items = "";

            $.each(data, function (i, item) {
                items += "<option value='" + item.Value + "' " + item.Selected + ">" + item.Text + "</option>";
            });

            list.append(items);
            list.bootstrapDualListbox('refresh');
        });

        attachDropDowns("ProvinceId", "DistrictId", "District", '@Url.Content("~/Prisoner/Districts/")');

        function attachDropDowns(parentId, childId, label, url, child2Id, parentKey) {
            var parent = $('#' + parentId);
            var child = $('#' + childId);

            parent.change(populateDropDown);

            function populateDropDown(selectedId) {
                child.prop('disabled', 'disabled');

                var getUrl = url + parent.val();

                if (child2Id)
                    getUrl = url + $('#' + child2Id).val() + "?" + parentKey + "=" + parent.val();

                $.getJSON(getUrl,
                    function (data) {
                        var items = '<option>-- Select ' + label + ' --</option>';
                        var isDisabled = true;

                        $.each(data, function (i, item) {
                            items += "<option value='" + item.Value + "'>" + item.Text + "</option>";
                            isDisabled = false;
                        });

                        child.prop('disabled', isDisabled);
                        child.html(items);
                    });
            }
        }

    </script>
}


